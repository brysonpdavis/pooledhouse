generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// auth.js model for a user's associated provider accounts
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// auth.js model for a client's session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// auth.js model for a user
model User {
  id                        String                      @id @default(cuid())
  name                      String?
  email                     String                      @unique
  emailVerified             DateTime?                   @map("email_verified")
  phone                     String?                      @unique
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  createdPlaces             Place[]
  createdReviews            Review[]                    @relation("CreatedByUser")
  industryVerificationToken String?                     @unique
  verification              IndustryVerificationToken?  @relation("ConsumedByUser", fields: [industryVerificationToken], references: [token])
  createdIndustryTokens     IndustryVerificationToken[] @relation("CreatedByUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Place {
  id              String   @id @default(cuid())
  name            String
  lat             Float
  lng             Float
  googlePlaceId   String   @unique @map("google_place_id")
  address         String
  reviews         Review[]
  createdByUserId String   @map("created_by_user_id")
  createdByUser   User     @relation(fields: [createdByUserId], references: [id])

  @@map("places")
}

model Review {
  id              String    @id @default(cuid())
  overallRating   Int
  description     String
  placeId         String    @map("place_id")
  place           Place     @relation(fields: [placeId], references: [id])
  createdByUserId String    @map("created_by_user_id")
  createdByUser   User      @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  lastEdited      DateTime?

  @@map("reviews")
}

model IndustryVerificationToken {
  token           String   @unique
  expires         DateTime
  createdByUserId String   @map("created_by_user_id")
  createdByUser   User     @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  consumedByUser  User?    @relation("ConsumedByUser")
}
