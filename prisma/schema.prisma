generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// auth.js model for a user's associated provider accounts
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// auth.js model for a client's session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// auth.js model for a user
model User {
  id                        String                      @id @default(cuid())
  name                      String?
  email                     String                      @unique
  emailVerified             DateTime?                   @map("email_verified")
  phone                     String                      @unique
  image                     String?
  industryVerificationToken String?                     @unique
  verification              IndustryVerificationToken?  @relation("ConsumedByUser", fields: [industryVerificationToken], references: [token])
  accounts                  Account[]
  sessions                  Session[]
  createdPlaces             Place[]
  createdWorkplaceReviews   WorkplaceReview[]           @relation("CreatedByUser")
  createdExperienceReview   ExperienceReview[]          @relation("CreatedByUser")
  createdIndustryTokens     IndustryVerificationToken[] @relation("CreatedByUser")
  workplaceReviewTokens     WorkplaceReviewToken[]      @relation("AssociatedUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Place {
  id                String             @id @default(cuid())
  name              String
  lat               Float
  lng               Float
  googlePlaceId     String             @unique @map("google_place_id")
  address           String
  workplaceScore    Float?
  workplaceReviews  WorkplaceReview[]
  experienceScore   Float?
  experienceReviews ExperienceReview[]
  createdByUserId   String             @map("created_by_user_id")
  createdByUser     User               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("places")
}

model WorkplaceReview {
  id                      String               @id @default(cuid())
  overallRating           Int
  description             String
  compensationRating      Int?
  compensationDescription String?
  guestDescription        String?
  cultureDescription      String?
  idealFor                String?
  placeId                 String               @map("place_id")
  place                   Place                @relation(fields: [placeId], references: [id])
  createdByUserId         String               @map("created_by_user_id")
  createdByUser           User                 @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
  lastEdited              DateTime?
  token                   String               @unique
  workplaceReviewToken    WorkplaceReviewToken @relation("Token", fields: [token], references: [token])

  @@map("workplace_reviews")
}

model ExperienceReview {
  id              String  @id @default(cuid())
  overallRating   Int
  description     String
  fnbRating       Int?
  fnbDescription  String?
  vibeRating      Int?
  vibeDescription String?
  placeId         String  @map("place_id")
  place           Place   @relation(fields: [placeId], references: [id])
  createdByUserId String  @map("created_by_user_id")
  createdByUser   User    @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("experience_reviews")
}

model IndustryVerificationToken {
  token                String                @unique
  createdAt            DateTime              @default(now()) @map("created_at")
  createdByUserId      String                @map("created_by_user_id")
  createdByUser        User                  @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
  consumedByUser       User?                 @relation("ConsumedByUser")
  contactVerifications ContactVerification[]

  @@map("industry_verification_tokens")
}

model WorkplaceReviewToken {
  token            String           @unique @default(cuid())
  createdAt        DateTime         @default(now()) @map("created_at")
  associatedUserId String           @map("associated_by_user_id")
  associatedUser   User             @relation("AssociatedUser", fields: [associatedUserId], references: [id], onDelete: Cascade)
  workplaceReview  WorkplaceReview? @relation("Token")

  @@map("workplace_review_tokens")
}

model ContactVerification {
  id                               String                     @id @default(cuid())
  email                            String
  emailVerificationCodeSentAt      DateTime?                  @map("email_verification_code_sent_at")
  emailVerifiedAt                  DateTime?                  @map("email_verified_at")
  phone                            String
  phoneVerificationCodeSentAt      DateTime?                  @map("phone_verification_code_sent_at")
  phoneVerifiedAt                  DateTime?                  @map("phone_verified_at")
  industryVerificationTokenDetails IndustryVerificationToken? @relation(fields: [industryVerificationToken], references: [token])
  industryVerificationToken        String?

  @@unique([email, phone])
  @@map("contact_verifications")
}
