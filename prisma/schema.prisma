generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// auth.js model for a user's associated provider accounts
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

/// auth.js model for a client's session
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

/// auth.js model for a user
model User {
    id                        String                      @id @default(cuid())
    name                      String?
    email                     String                      @unique
    emailVerified             DateTime?                   @map("email_verified")
    phone                     String                      @unique
    image                     String?
    industryVerificationToken String?                     @unique
    verification              IndustryVerificationToken?  @relation("ConsumedByUser", fields: [industryVerificationToken], references: [token])
    accounts                  Account[]
    sessions                  Session[]
    createdPlaces             Place[]
    createdWorkplaceReviews   WorkplaceReview[]           @relation("CreatedByUser")
    createdExperienceReview   ExperienceReview[]          @relation("CreatedByUser")
    createdIndustryTokens     IndustryVerificationToken[] @relation("CreatedByUser")
    workplaceReviewTokens     WorkplaceReviewToken[]      @relation("AssociatedUser")
    reviews                   Review[]                    @relation("CreatedByUser")
    reviewCommentReactions    ReviewCommentReaction[]     @relation("UserCommentReactions")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Place {
    id                String             @id @default(cuid())
    name              String
    lat               Float
    lng               Float
    googlePlaceId     String             @unique @map("google_place_id")
    address           String
    workplaceScore    Float?
    workplaceReviews  WorkplaceReview[]
    experienceScore   Float?
    experienceReviews ExperienceReview[]
    createdByUserId   String             @map("created_by_user_id")
    createdByUser     User               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

    @@map("places")
}

model Review {
    id               String            @id @default(cuid())
    createdByUserId  String            @map("created_by_user_id")
    createdByUser    User              @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
    workplaceReview  WorkplaceReview?
    experienceReview ExperienceReview?
    reviewComments   ReviewComment[]   @relation("ReviewToComment")

    @@map("reviews")
}

model ReviewComment {
    id       String @id @default(cuid())
    reviewId String @map("review_id")
    review   Review @relation("ReviewToComment", fields: [reviewId], references: [id], onDelete: Cascade)

    text String @db.VarChar(2048)

    numberOfAgreements Int   @default(0) @map("number_of_agreements")
    numberOfReactions  Int   @default(0) @map("number_of_reactions")
    reactionScore      Float @default(0) @map("reaction_score")

    overallExperienceReview ExperienceReview? @relation("OverallComment")
    fnbExperienceReview     ExperienceReview? @relation("FnbComment")
    vibeExperienceReview    ExperienceReview? @relation("VibeComment")

    overallWorkplaceReview          WorkplaceReview? @relation("OverallComment")
    compensationWorkplaceReview     WorkplaceReview? @relation("CompensationComment")
    guestDescriptionWorkplaceReview WorkplaceReview? @relation("GuestComment")
    cultureWorkplaceReview          WorkplaceReview? @relation("CultureComment")
    idealForWorkplaceReview         WorkplaceReview? @relation("IdealForComment")

    reactions ReviewCommentReaction[] @relation("ReactionToComment")

    @@map("review_comments")
}

model ReviewCommentReaction {
    id              String        @id @default(cuid())
    reviewCommentId String        @map("review_comment_id")
    reviewComment   ReviewComment @relation("ReactionToComment", fields: [reviewCommentId], references: [id])
    agree           Boolean
    userId          String        @map("user_id")
    user            User          @relation("UserCommentReactions", fields: [userId], references: [id])

    @@unique([reviewCommentId, userId])
    @@map("review_comment_reactions")
}

model WorkplaceReview {
    id String @id @default(cuid())

    reviewId String @unique @map("review_id")
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

    overallRating               Int           @map("overall_rating")
    overallDescriptionCommentId String        @unique @map("overall_description_comment_id")
    overallDescriptionComment   ReviewComment @relation("OverallComment", fields: [overallDescriptionCommentId], references: [id], onDelete: Cascade)

    compensationRating               Int?           @map("compensation_rating")
    compensationDescriptionCommentId String?        @unique @map("compensation_description_comment_id")
    compensationDescriptionComment   ReviewComment? @relation("CompensationComment", fields: [compensationDescriptionCommentId], references: [id], onDelete: Cascade)

    guestDescriptionCommentId String?        @unique @map("guest_description_comment_id")
    guestDescriptionComment   ReviewComment? @relation("GuestComment", fields: [guestDescriptionCommentId], references: [id], onDelete: Cascade)

    cultureDescriptionCommentId String?        @unique @map("culture_description_comment_id")
    cultureDescriptionComment   ReviewComment? @relation("CultureComment", fields: [cultureDescriptionCommentId], references: [id], onDelete: Cascade)

    idealForCommentId String?        @unique @map("ideal_for_comment_id")
    idealForComment   ReviewComment? @relation("IdealForComment", fields: [idealForCommentId], references: [id], onDelete: Cascade)

    placeId String @map("place_id")
    place   Place  @relation(fields: [placeId], references: [id])

    createdByUserId String @map("created_by_user_id")
    createdByUser   User   @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    token                String               @unique
    workplaceReviewToken WorkplaceReviewToken @relation("Token", fields: [token], references: [token])

    @@map("workplace_reviews")
}

model ExperienceReview {
    id String @id @default(cuid())

    reviewId String @unique @map("review_id")
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

    overallRating               Int           @map("overall_rating")
    overallDescriptionCommentId String        @unique @map("overall_description_comment_id")
    overallDescriptionComment   ReviewComment @relation("OverallComment", fields: [overallDescriptionCommentId], references: [id], onDelete: Cascade)

    fnbRating               Int?           @map("fnb_rating")
    fnbDescriptionCommentId String?        @unique @map("fnb_description_comment_id")
    fnbDescriptionComment   ReviewComment? @relation("FnbComment", fields: [fnbDescriptionCommentId], references: [id], onDelete: Cascade)

    vibeRating               Int?           @map("vibe_rating")
    vibeDescriptionCommentId String?        @unique @map("vibe_description_comment_id")
    vibeDescriptionComment   ReviewComment? @relation("VibeComment", fields: [vibeDescriptionCommentId], references: [id], onDelete: Cascade)

    placeId String @map("place_id")
    place   Place  @relation(fields: [placeId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    createdByUserId String @map("created_by_user_id")
    createdByUser   User   @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)

    @@map("experience_reviews")
}

model IndustryVerificationToken {
    token                String                @unique
    createdAt            DateTime              @default(now()) @map("created_at")
    createdByUserId      String                @map("created_by_user_id")
    createdByUser        User                  @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
    consumedByUser       User?                 @relation("ConsumedByUser")
    contactVerifications ContactVerification[]

    @@map("industry_verification_tokens")
}

model WorkplaceReviewToken {
    token            String           @unique @default(cuid())
    createdAt        DateTime         @default(now()) @map("created_at")
    associatedUserId String           @map("associated_by_user_id")
    associatedUser   User             @relation("AssociatedUser", fields: [associatedUserId], references: [id], onDelete: Cascade)
    workplaceReview  WorkplaceReview? @relation("Token")

    @@map("workplace_review_tokens")
}

model ContactVerification {
    id                               String                     @id @default(cuid())
    email                            String
    emailVerificationCodeSentAt      DateTime?                  @map("email_verification_code_sent_at")
    emailVerifiedAt                  DateTime?                  @map("email_verified_at")
    phone                            String
    phoneVerificationCodeSentAt      DateTime?                  @map("phone_verification_code_sent_at")
    phoneVerifiedAt                  DateTime?                  @map("phone_verified_at")
    industryVerificationTokenDetails IndustryVerificationToken? @relation(fields: [industryVerificationToken], references: [token])
    industryVerificationToken        String?

    @@unique([email, phone])
    @@map("contact_verifications")
}
